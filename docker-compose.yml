# port: 80

services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DEFAULT_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_APP_USER: ${POSTGRES_APP_USER}
      POSTGRES_APP_PASSWORD: ${POSTGRES_APP_PASSWORD}
      POSTGRES_APP_DB: ${POSTGRES_APP_DB}
    volumes:
      - ./database/schema:/docker-entrypoint-initdb.d/schema
      - ./database/scripts/setup.sh:/docker-entrypoint-initdb.d/setup.sh
      - postgresql-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DEFAULT_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
  back:
    image: timesphere-backend:latest
    environment:
      POSTGRES_APP_USER: ${POSTGRES_APP_USER}
      POSTGRES_APP_PASSWORD: ${POSTGRES_APP_PASSWORD}
      POSTGRES_APP_DB: ${POSTGRES_APP_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      AUTHZERO_DOMAIN: ${AUTHZERO_DOMAIN}
      AUTHZERO_AUDIENCE: ${AUTHZERO_AUDIENCE}
    depends_on:
      db:
        condition: service_healthy
  front:
    image: timesphere-frontend:latest
    environment:
      BACKEND_URL: http://back:${BACK_PORT}
      REACT_APP_AUTHZERO_DOMAIN: ${AUTHZERO_DOMAIN}
      REACT_APP_AUTHZERO_CLIENT_ID: ${AUTHZERO_CLIENT_ID}
    depends_on:
      - back
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      #- ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - back
      - front
    environment:
      - SERVICE_FQDN_NGINX_80